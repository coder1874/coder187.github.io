<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Typora：一款优雅高效的Markdown编辑器]]></title>
    <url>%2F2019%2F05%2F06%2FTypora-%E4%B8%80%E6%AC%BE%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E7%9A%84Markdown%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Typora是一款超简洁的markdown编辑器特点： 完全免费，目前已支持中文 跨平台，支持windows,mac,linux 支持数学公式输入，图片插入 极其简洁，无多余功能 界面所见即所得 区域元素（YAML FONT Matters） 在文章最上方输入---，按换行键产生，输入内容即可 标题 开头#的个数表示，空格+文字。标题有1~6个级别，#表示开始，按换行键结束 1234# --- H1## --- H2...###### --- H6 引注 开头&gt;表示，空格+文字，按换行键换行，双按换行跳出 1&gt; 文字 文字 序列 开头*/+/-，空格+文字，可以创建无序序列，换行键换行，删除键+shift+tab跳出 开头1.，空格+后接文字，可以创建有序序列 1234567* 张三+ 李四- 王五1. 张三2. 李四3. 王五 可选序列 无序序列+空格+[ ]+空格+文字，换行键换行，删除键+shift+tab跳出 123- [ ] a+ [ ] b* [ ] c 代码块1​``` + 语言名，开启代码块，换行键换行，光标下移键跳出]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>编辑器</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库（DBMS）]]></title>
    <url>%2F2019%2F05%2F04%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[常用命令 MySQL服务启动 123451.手动2.cmd --&gt; services.msc3.在Windows系统DOS窗口下 net start mysql -- 开启MySQL服务（不区分大小写） net stop mysql -- 关闭MySQL服务（不区分大小写） MySQL登录 1234567891011-- 明文形式登录本地的MySQL mysql -u用户名 -p密码 -- 密文形式登录MySQL mysql -u用户名 -p回车 输入密码 -- 登录指定IP账户 mysql -hIP地址 -u要登录的目标账户 -p 要登录的目标账户密码 -- 登录指定IP账户 mysql --host = IP地址 --user = 要登录的目标账户 --password = 要登录的目标账户密码 MySQL退出 12exitquit 常见错误代码： 12ERROR 2003: mysql的服务没开。ERROR 1045: 密码错误(using password: YES) 数据库分类： 关系型数据库： 指的是数据库中所存储的数据，数据与数据之间都是有关系的，数据与数据之间都是比较有规则的 非关系型数据库：指的是数据库中所存储的数据，数据与数据之间没有关系，而且数据与数据之间毫无规则。 SQL语句 概述： Structured Query Language：结构化查询语言 其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。 SQL通用语法： 以;结尾 SQL不区分大小写，关键字建议大写 注释： 单行：-- 注释内容 （通用）==--后必须有空格== 多行：/ 注释内容 / SQL分类： DDL(Data Definition Language)数据定义语言 1用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等 DML(Data Manipulation Language)数据操作语言 1用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等 DQL(Data Query Language)数据查询语言 1用来查询数据库中表的记录(数据)。关键字：select, where 等 DCL(Data Control Language)数据控制语言(了解) 1DCL(Data Control Language)数据控制语言(了解) DDL：操作数据库、表 ==操作数据库==：CRUD C(Create):==创建== 1234567891011-- 创建数据库： create database 数据库名称; -- 创建数据库，判断不存在，再创建： create database if not exists 数据库名称; -- 创建数据库，并指定字符集 create database 数据库名称 character set 字符集名; -- 创建数据库，判断是否存在，并指定字符集 create database if not exists 数据库名称 character set 字符集名; R(Retrieve)：==查询== 12345-- 查询所有数据库的名称: show databases; -- 查询某个数据库的定义信息:查询某个数据库的创建语句,可以看到字符集 show create database 数据库名称; U(Update):修改 12-- 修改数据库的字符集 alter database 数据库名称 character set 字符集名称; D(Delete):删除 12345-- 删除数据库 drop database 数据库名称; -- 判断数据库存在，存在再删除 drop database if exists 数据库名称; 使用数据库 12345-- 查询当前正在使用的数据库名称 select database(); -- 使用数据库 use 数据库名称; ==操作表== C(Create):创建 123456789101112131415161718192021222324252627-- 语法 create table 表名( 列名1 数据类型1, 列名2 数据类型2, .... 列名n 数据类型n -- 最后一列，不需要加逗号 (,) ); -- 数据类型： 1. int：整数类型 age int, 2. double:小数类型 score double(数据总位数,小数点位数) score double(5,2) -- 表示数据总共5位，小数点后有两位，即最大表示999.99 3. date:日期，只包含年月日，yyyy-MM-dd 4. datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss 5. timestamp:时间戳类型 包含年月日时分秒 yyyy-MM-dd HH:mm:ss 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值 6. varchar：字符串 name varchar(20):姓名最大20个字符 zhangsan 8个字符 张三 2个字符 -- 在数据库中，字符和字符串是一样的。字符可以理解为“长度为1的字符串”。 -- varchar(10): 最多存储10个字符。如果存储的是“hello”，数据库中真正存储的是“hello”，5个字符长度 --char(10): 最多存储10个字符。如果存储的是“hello”，数据库中真正存储的是“hello ”，10个字符长度 -- 如果需要在数据库中存储文件，则使用varchar类型来存储“该文件的路径字符串”-- 复制表 复制的只是表结构，无数据 create table 新表名 like 被复制的表名; R(Retrieve)：查询 12345678-- 查询某个数据库中所有的表名称 show tables -- 查询表结构 desc 表名; -- 查看创建表的SQL语句 show create table 表名; U(Update):修改 123456789101112131415161718-- 修改表名 alter table 表名 rename to 新的表名; -- 修改表的字符集 alter table 表名 character set 字符集名称; -- 添加一列 alter table 表名 add 列名 数据类型; -- 添加多列 alter table 表名 add (列名1 数据类型,列名2 数据类型); -- 修改列名称 数据类型 alter table 表名 change 列名 新列名 新数据类型; alter table 表名 modify 列名 新数据类型; -- 删除列 alter table 表名 drop 列名; D(Delete):删除 12345-- 直接删除表 drop table 表名;-- 如果存在就删除表，防止不存在表的时候报错 drop table if exists 表名; DML：增删改表中数据 添加数据： 123456789101112131415-- 语法： insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n); -- 注意： 1. 列名和值要一一对应。 2. 如果表名后，不定义列名，则默认给所有列添加值 insert into 表名 values(值1,值2,...值n); 3. 除了数字类型，其他类型需要使用单引号引起来 4. 没有添加数据的字段会使用null -- 蠕虫复制 --&gt; 将一张已经存在的表2数据复制到表1 -- 全部复制 insert into 表名1 select * from 表名2; -- 复制部分列 insert into 表名1(列1,列2) select 列1，列2 from 表名2; 删除数据： 12345678-- 语法： delete from 表名 [where 条件] -- 注意： 1. 如果不加条件，则删除表中所有记录。 2. 如果要删除所有记录 1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作 2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的空表。 修改数据： 12345-- 语法： update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];-- 注意： 如果不加任何条件，则会将表中所有指定列记录全部修改。 DQL:查询表中的记录 语法： 1234567891011121314select 字段列表from 表名列表where 条件列表group by 分组字段having 分组之后order by 排序limit 分页限定 基础查询： 1234567891011121314151617181920212223242526-- 多个字段的查询 select 字段名1，字段名2... from 表名； -- 注意： 如果查询所有字段，则可以使用*来替代字段列表。 select * from 表名; -- 去除重复： distinct select distinct 字段名 from 表名;-- 计算列 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算） select 列名1 + 固定值 from 表名; SELECT 列名1 + 列名2 FROM 表名; ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null 表达式1：哪个字段需要判断是否为null 表达式2：如果该字段为null后的替换值。 -- 起别名： SELECT 字段名1 AS 别名, 字段名2 AS 别名... FROM 表名 as 表别名; SELECT * ,math AS 数学 ,english AS 英语 ,math + english AS 总分 FROM stu AS 学生表 as：as也可以省略 条件查询 123456789101112131415161718192021222324251. where子句后跟条件2. 运算符 -- 大于、小于、小于等于、大于等于、等于、不等于 &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt; -- 在 值1 和 值2 之间，BETWEEN 值1 AND 值2，包含值1和值2，且值1必须小于值2 BETWEEN...AND -- 在集合中 IN( 集合) -- 配合占位符使用 LIKE：模糊查询 占位符： _:单个任意字符 %：多个任意字符 select 列名 from 表名 where 列名 like '占位符组成的条件' -- 判断是null值 IS NULL -- 逻辑与或非 建议使用英文 and 或 &amp;&amp; or 或 || not 或 ! DQL：查询语句 排序查询： 12345678910-- 语法 order by 子句 order by 排序字段1 排序方式1, 排序字段2 排序方式2... -- 排序方式 ASC:升序，默认的 DESC:降序 -- 注意： 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件 聚合函数： 概述：将一列数据作为一个整体，进行纵向的计算 12345678910111213141516--计算个数 count(列名) -- 1.一般选择非空的列：主键； -- 2.count(*)底层是count(1)，是通过统计表中的行数得出总个数 -- 计算最大值 max(列名) -- 计算最小值 min(列名) -- 求和 sum(列名) -- 求平均数 avg(列名) 注意： 12345-- 聚合函数的计算，排除null值-- 解决方案： 1.选择不包含 null 的列进行计算 2.使用 IFNULL 函数 分组查询： 123456789-- 语法 group by 分组字段 select 分组字段,聚合函数 from 表名 group by 分组字段 having 条件；--注意： 1.分组之后查询的字段：分组字段、聚合函数 2.where 和 having 的区别 1.where 在分组之前进行限定，如果不满足条件，则不参与分组。 2.having在分组之后进行限定，如果不满足结果，则不会被查询出来 3.where 后不可以跟聚合函数， having 可以进行聚合函数的判断。 分页查询 123456-- 语法： limit 开始的索引,每页查询的条数;-- 公式 开始的索引 = （当前的页码 - 1） * 每页显示的条数 -- limit 是MySQL的‘方言’，若“开始的索引省略”，默认是0 约束 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性 分类： 12345678-- 1.主键约束 primary key-- 2.非空约束 not null-- 3.唯一约束 unique-- 4.外键约束 foreign key 1、非空约束：not null，值不能为null 1234567891011-- 添加方式1：创建表时添加约束 create table 表名( 字段名1 数据类型1 not null, 字段名2 数据类型2 ); -- 添加方式2：创建完表后，添加非空约束 alter table 表名 modify 字段名 数据类型 not null; -- 删除非空约束 alter table 表名 modify 字段名 数据类型; 2、唯一约束：unique，值不能重复 1234567891011-- 添加方式1：创建表时添加约束 create table 表名( 字段名1 数据类型1 unique, 字段名2 数据类型2 ); -- 添加方式2：创建完表后，添加约束 alter table 表名 modify 字段名 数据类型 unique; -- 删除唯一约束 alter table 表名 drop index 字段名; 注意：MySQL中。唯一约束限定的列的值可以有多个null 3、主键约束：primary key 注意： 含义：非空且唯一 一张表只能有一个字段为主键 主键就是表中记录的唯一标识 123456789101112-- 添加方式1：创建表时添加主键约束 create table 表名( 字段名1 数据类型1 primary key, 字段名2 数据类型2 ); -- 添加方式2：创建完表后，添加约束 alter table 表名 modify 字段名 数据类型 primary key; alter table 表名 add primary key(字段名); -- 删除主键 alter table 表名 drop primary key; 4、自动增长： 概述： 如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长 一般配合主键一起，实现主键自增长 默认的auto_increment 的开始值是1 1234567891011121314151617181920-- 添加方式1：创建表时添加自动增长 create table 表名( 字段名1 数据类型1 primary key auto_increment, -- 添加主键约束及自增长 字段名2 数据类型2 ); -- 添加方式2：创建完表后，添加自动增长 alter table 表名 modify 字段名 数据类型 auto_increment; -- 删除自动增长 alter table 表名 modify 字段名 数据类型; -- auto_increment 初始值的修改方式1： create table 表名( 字段名1 数据类型1 primary key auto_increment, -- 添加主键约束及自增长 字段名2 数据类型2 )auto_increment = 起始值; -- auto_increment 初始值的修改方式2： alter table 表名 auto_increment = 起始值 注意： delete：删除所有记录之后，自增长没有影响 truncate：删除之后，自增长重新开始 5、默认值 12345678910-- 语法 字段名 字段类型 default 默认值; -- 添加默认值的方式：创建表时指定默认值 create table 表名( 字段名1 数据类型1 default 默认值, 字段名2 数据类型2 ); -- 给添加了默认值的字段添加数据时可以使用 default 表示使用默认值，若该默认值在最后，可省略不写default 6、外键约束： 概述：foreign key，让表与表之间产生关系，从而保证数据的正确性 123456789101112-- 添加外方式1：创建表时添加外键 create table 表名 ( ... 外键列, constraint 外键名称 foreign key (外键列名称) references 主表名称 (主表列名称) ); -- 添加方式2：表创建后添加外键 alter table 表名 add constraint 外键名称 foreign key (外键列名称) references 主表名称 (主表列名称); -- 删除外键 alter table 表名 drop foreign key 外键名称; 级联操作： 123456-- 添加级联操作 alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称) on update cascade on delete cascade; -- 分类 1.级联更新：on update cascade 2.级联删除：on delete cascade]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
